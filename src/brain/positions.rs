use chess::Piece;

const POSITIONAL_VALUES: [[f64; 64]; 6] = [
    // Pawn Values
    [
     
/*
        A     B     C     D     E     F     G    H
                                                        */
/*8*/   0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, 0.0,
        5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0, 5.0,
        1.0,  1.0,  2.0,  3.0,  3.0,  2.0,  1.0, 1.0,
        0.5,  0.5,  1.0,  2.5,  2.5,  1.0,  0.5, 0.5,
        0.0,  0.0,  0.0,  2.0,  2.0,  0.0,  0.0, 0.0,
        0.5, -0.5, -1.0,  0.0,  0.0, -1.0, -0.5, 0.5,
        0.5,  1.0,  1.0, -2.0, -2.0,  1.0,  1.0, 0.5,
        0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, 0.0,
    ],
    // Knight Values
    [
        -5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0,
        -4.0, -2.0,  0.0,  0.0,  0.0,  0.0, -2.0, -4.0,
        -3.0,  0.0,  1.0,  1.5,  1.5,  1.0,  0.0, -3.0,
        -3.0,  0.5,  1.5,  2.0,  2.0,  1.5,  0.5, -3.0,
        -3.0,  0.0,  1.5,  2.0,  2.0,  1.5,  0.0, -3.0,
        -3.0,  0.5,  1.0,  1.5,  1.5,  1.0,  0.5, -3.0,
        -4.0, -2.0,  0.0,  0.5,  0.5,  0.0, -2.0, -4.0,
        -5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0,
    ],
    // Bishop Values
    [
        -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0,
        -1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0,
        -1.0,  0.0,  0.5,  1.0,  1.0,  0.5,  0.0, -1.0,
        -1.0,  0.5,  0.5,  1.0,  1.0,  0.5,  0.5, -1.0,
        -1.0,  0.0,  1.0,  1.0,  1.0,  1.0,  0.0, -1.0,
        -1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0, -1.0,
        -1.0,  0.5,  0.0,  0.0,  0.0,  0.0,  0.5, -1.0,
        -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0,
    ],
    // Rook Values
    [
         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,  0.0,
         0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,  0.5,
        -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5,
        -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5,
        -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5,
        -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5,
        -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5,
         0.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0,  0.0,
    ],
    // Queen Values
    [
        -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0,
        -1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0,
        -1.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0,
        -0.5,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5,
        -0.5,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5,
        -1.0,  0.5,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0,
        -1.0,  0.0,  0.5,  0.0,  0.0,  0.0,  0.0, -1.0,
        -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0,
    ],
    // King Values
    [
        -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0,
        -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0,
        -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0,
        -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0,
        -2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0,
        -1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0,
         2.0,  2.0,  0.0,  0.0,  0.0,  0.0,  2.0,  2.0,
         2.0,  3.0,  1.0,  0.0,  0.0,  1.0,  3.0,  2.0,
    ],
];

const PIECE_VALUES: [f64; 6] = [10.0, 35.0, 35.0, 52.5, 100.0, 1000.0];

const BOARD_FLIP_INDEX: [u32; 64] = [
    56, 57, 58, 59, 60, 61, 62, 63, 48, 49, 50, 51, 52, 53, 54, 55, 40, 41, 42, 43, 44, 45, 46, 47,
    32, 33, 34, 35, 36, 37, 38, 39, 24, 25, 26, 27, 28, 29, 30, 31, 16, 17, 18, 19, 20, 21, 22, 23,
    8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7,
];

pub fn get_flipped_board_index(index: usize) -> usize {
    unsafe {
        return BOARD_FLIP_INDEX[index] as usize;
    }
}

pub fn get_piece_value(piece: Piece, index: usize, is_pinned: bool) -> f64 {
    let i = piece.to_index();
    unsafe {
        let pos_val = POSITIONAL_VALUES.get_unchecked(i).get_unchecked(index);
        let piece_val = PIECE_VALUES.get_unchecked(i) * if is_pinned { 0.5 } else { 1. };

        return *pos_val + piece_val;
    };
}
